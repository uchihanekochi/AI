{"cells":[{"cell_type":"markdown","metadata":{"id":"aPP6g61hzRp9"},"source":["## ⚙️ Link:   [![](https://img.shields.io/badge/Ấn%20vào%20đây-yellow)](https://violet-ill-informed-part.anvil.app)"]},{"cell_type":"code","execution_count":null,"metadata":{"cellView":"form","colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":356},"id":"vqnsqG_nTFJB"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","Requirement already satisfied: anvil-uplink in /usr/local/lib/python3.10/dist-packages (0.4.2)\n","Collecting argparse (from anvil-uplink)\n","  Using cached argparse-1.4.0-py2.py3-none-any.whl (23 kB)\n","Requirement already satisfied: future in /usr/local/lib/python3.10/dist-packages (from anvil-uplink) (0.18.3)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from anvil-uplink) (1.16.0)\n","Requirement already satisfied: ws4py in /usr/local/lib/python3.10/dist-packages (from anvil-uplink) (0.5.1)\n","Installing collected packages: argparse\n","Successfully installed argparse-1.4.0\n"]},{"data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["argparse"]}}},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Connecting to wss://anvil.works/uplink\n","Anvil websocket open\n","Connected to \"Published\" as SERVER\n","ls: cannot access '/content/drive/MyDrive/Đồ án AI/*.py': No such file or directory\n","cat: '/content/drive/MyDrive/Đồ án AI/traveller.py': No such file or directory\n"]}],"source":["#@title #### ⌛️ Source code - RESTRICTED AREA !!!\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","!pip install anvil-uplink\n","!apt-get install xattr \u003e /dev/null\n","\n","import warnings\n","warnings.filterwarnings('ignore')\n","import numpy as np\n","from copy import deepcopy\n","import anvil.server\n","\n","anvil.server.connect(\"server_LU6IJLIHIQMEDVFDQDGQHP4L-NTELYCTLUUWNSOLE\")\n","!ls /content/drive/MyDrive/Đồ\\ án\\ AI/*.py\n","!cat '/content/drive/MyDrive/Đồ án AI/traveller.py'\n","import sys\n","sys.path.append('/content/drive/MyDrive/Đồ án AI/Source')\n","from traveller import GeneticSearch\n","@anvil.server.callable\n","def genetic_search(cities_input, matrix_input, num_gen_input, popusize_input, mutate_input, patience_input):\n","    num_city_error = 0\n","    cities = [city.strip() for city in cities_input.split(',')]\n","    matrix = []\n","    rows = matrix_input.strip().split(\"\\n\")\n","    for row in rows:\n","        distances = [float(distance) for distance in row.split()]\n","        if len(distances) != len(cities):\n","            num_city_error = 1\n","            break\n","        matrix.append(distances)\n","    if len(rows) != len(cities):\n","        num_city_error = 1\n","\n","    num_gen_ = num_gen_input\n","    popu_size = popusize_input\n","    mutate = mutate_input\n","    patience = patience_input\n","\n","    if len(cities) != len(matrix):\n","        num_city_error = 1\n","\n","    num_gen_error = 0\n","    if num_gen_input \u003c 1:\n","        num_gen_error = 1\n","\n","    popusize_error = 0\n","    if popusize_input \u003c 1:\n","        popusize_error = 1\n","\n","    mutate_error = 0\n","    if mutate_input \u003e 1 or mutate_input \u003c 0:\n","        mutate_error = 1\n","\n","    patience_error = 0\n","    if patience_input \u003c 1:\n","        patience_error = 1\n","\n","    errors = [num_city_error, num_gen_error, popusize_error, mutate_error, patience_error]\n","    errors = np.nonzero(errors)[0].tolist()\n","\n","    result = None\n","    if len(errors) == 0:\n","        graph = {}\n","        for i in range(len(matrix)):\n","            city_begin = cities[i]\n","            city_dict = {}\n","            for j in range(len(matrix[i])):\n","                city_end = cities[j]\n","                city_dict[city_end] = matrix[i][j]\n","            graph[city_begin] = city_dict\n","\n","        searcher = GeneticSearch(graph)\n","        result = searcher.search(num_generation=num_gen_input,\n","                                 population_size=popusize_input,\n","                                 mutation_chance=mutate_input,\n","                                 patience=patience_input)\n","        result = (', '.join(result.path()), 1/result.value())\n","    return result\n","anvil.server.wait_forever()"]}],"metadata":{"colab":{"collapsed_sections":["aPP6g61hzRp9"],"name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}